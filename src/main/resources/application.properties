spring.application.name=GestorOrdenes

# PostgreSQL Configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/gestor_ordenes_db
spring.datasource.username=postgres
spring.datasource.password=Snaitaog_1
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA / Hibernate Configuration
# Opciones para ddl-auto:
# 'create': borra y crea el esquema al inicio. Útil para desarrollo inicial. ¡Borra datos!
# 'create-drop': como create, pero borra el esquema al detener la aplicación.
# 'update': intenta actualizar el esquema si hay cambios en las entidades. No borra datos, pero puede fallar con cambios complejos. Bueno para desarrollo.
# 'validate': valida que el esquema de la BD coincida con las entidades, no hace cambios.
# 'none': no hace nada. Recomendado para producción (usar migraciones con Flyway/Liquibase).
spring.jpa.hibernate.ddl-auto=create-drop

# Muestra las consultas SQL en la consola (útil para depurar)
spring.jpa.show-sql=true

# Formatea el SQL mostrado para que sea legible
spring.jpa.properties.hibernate.format_sql=true

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# SSL Configuration
server.port=8443
server.ssl.enabled=true
server.ssl.key-store-type=PKCS12
server.ssl.key-store=classpath:gestorordenes.p12
  # Coincide con el nombre del archivo
server.ssl.key-store-password=Snaitaog_1
  # Tu contraseña
server.ssl.key-alias=gestorordenes
  # El alias que usaste dentro del keystore
# server.ssl.key-password=Snaitaog_1
# Si la clave privada tiene la misma contraseña
springdoc.packagesToScan=com.gestordeordenes.gestorordenes.controller